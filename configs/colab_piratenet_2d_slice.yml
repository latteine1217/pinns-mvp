# ========================================
# PirateNet Google Colab 配置 - 2D 切片版
# ========================================
# 用途：低記憶體 Colab 訓練，修復已知問題
# 預期時間：30-60 分鐘（1000 epochs, T4 GPU）
# 目標：L2 誤差 ≤ 15%
# 記憶體使用：~8 GB（適合 Colab 免費版）

experiment:
  name: "colab_piratenet_2d_slice"
  version: "v1.0"
  seed: 42
  device: "cuda"
  precision: "float32"
  description: "PirateNet 2D slice on Colab - memory optimized with all fixes"

# =============================================================================
# 資料配置（2D 切片）
# =============================================================================
data:
  type: "jhtdb_channel"
  dataset: "channel"
  re_tau: 1000
  
  data_dir: "./data/jhtdb"
  lowfi_dir: "./data/lowfi"
  
  # JHTDB 資料載入
  jhtdb_config:
    enabled: true
    dataset: "channel"
    re_tau: 1000
    time_step: 0.0
    use_cache: true
    
    # Domain configuration
    domain:
      x: [0.0, 25.132741228718345]  # 8π
      y: [-1.0, 1.0]  # ✅ 修復：正確的壁面位置
      z: [0.0, 9.42477796076938]    # 3π
    
    # Physical parameters
    Re_tau: 1000.0
    nu: 5.0e-5
    u_tau: 0.04997
  
  # Top-level domain (for physics module)
  domain:
    x_min: 0.0
    x_max: 25.132741228718345
    y_min: -1.0  # ✅ 修復：-1 而非 0
    y_max: 1.0
    z_min: 0.0
    z_max: 9.42477796076938
  
  # 🔧 2D 切片配置（關鍵：降低記憶體）
  slice_2d:
    enabled: true
    plane: "xy"  # 主剪切平面（x-y 平面）
    z_position: 4.71  # z 中心位置（3π/2）
    steady_state: true
    time_average_window: [20.0, 26.0]
  
  # 感測點與配點
  num_sensors: 50
  sensor_type: "qr_pivot"
  sensor_noise: 0.01
  
  num_collocation: 2048  # ✅ 降低至 2048（原 8192）
  num_boundary: 256      # ✅ 降低至 256（原 512）
  num_initial: 128       # ✅ 降低至 128（原 256）

# =============================================================================
# 感測點配置
# =============================================================================
sensors:
  K: 50
  selection_method: "qr_pivot"
  spatial_coverage: "optimal"

# =============================================================================
# 模型架構（PirateNet 標準配置）
# =============================================================================
model:
  type: "enhanced_fourier_mlp"
  
  in_dim: 2   # ✅ 2D 切片：(x, y)
  out_dim: 4  # (u, v, w, p)
  depth: 6    # PirateNet: 2 residual blocks × 3 layers
  width: 768  # PirateNet 標準寬度
  
  activation: "swish"  # PirateNet 激活函數
  
  # Fourier Features（PirateNet RFF 配置）
  use_fourier: true
  fourier_m: 64      # 64 個隨機特徵
  fourier_sigma: 2.0  # N(0, 2) 分佈
  fourier_multiscale: false
  trainable_fourier: false
  
  # RWF（PirateNet 權重因子化）
  use_rwf: true
  rwf_scale_mean: 1.0  # μ = 1.0
  rwf_scale_std: 0.1   # σ = 0.1
  
  use_residual: true   # 啟用殘差連接
  use_layer_norm: true  # 層歸一化
  dropout: 0.0

# =============================================================================
# 訓練配置（Colab 優化）
# =============================================================================
training:
  epochs: 1000  # 中等訓練輪數
  batch_size: 2048  # ✅ 降低批次大小（原 8192）
  
  # 優化器（Colab 可能不支持 SOAP，使用 Adam）
  optimizer:
    type: "adam"
    lr: 1.0e-3  # PirateNet 基礎學習率
    betas: [0.9, 0.999]
    weight_decay: 0.0
  
  # ✅ 修復：明確啟用學習率調度器
  scheduler:
    type: "warmup_exponential"
    warmup_epochs: 20  # 對應 ~2000 steps
    decay_rate: 0.9
    decay_epochs: 20   # 對應 2000 decay steps
    min_lr: 1.0e-6
  
  # 採樣配置（降低記憶體）
  sampling:
    pde_points: 2048       # ✅ 降低（原 8192）
    boundary_points: 256   # ✅ 降低（原 512）
    wall_clustering: 0.3
  
  validation_freq: 50
  checkpoint_freq: 100
  log_interval: 10
  
  gradient_clip: 1.0  # 防止梯度爆炸

# =============================================================================
# 損失權重（PirateNet GradNorm 配置）
# =============================================================================
losses:
  data_loss_weight: 100.0
  pde_loss_weight: 1.0
  wall_loss_weight: 10.0
  initial_loss_weight: 50.0
  prior_weight: 0.1
  
  # ✅ 啟用自適應權重（GradNorm）
  adaptive_weights:
    enabled: true
    method: "gradnorm"
    alpha: 1.5
    update_frequency: 100  # 每 100 steps 更新
  
  # ✅ 啟用因果權重
  causal_weights:
    enabled: true
    epsilon: 1.0  # 因果容忍度
    tol: 0.1

# =============================================================================
# 物理配置（2D 切片）
# =============================================================================
physics:
  type: "vs_pinn_channel_flow"
  nu: 5.0e-5
  re_tau: 1000
  u_tau: 0.04997
  
  # ✅ 修復：域範圍與資料一致
  domain:
    x_min: 0.0
    x_max: 25.132741228718345
    y_min: -1.0  # ✅ 關鍵修復
    y_max: 1.0
    z_min: 0.0
    z_max: 9.42477796076938
  
  # VS-PINN 縮放因子（2D：只用 N_x 和 N_y）
  scaling:
    use_scaling: true
    N_x: 2.0
    N_y: 12.0
    N_z: 1.0  # ✅ 2D 切片：z 方向不縮放

# =============================================================================
# 輸出配置
# =============================================================================
output:
  checkpoint_dir: "./checkpoints/colab_piratenet_2d_slice"
  results_dir: "./results/colab_piratenet_2d_slice"
  visualization_dir: "./results/colab_piratenet_2d_slice/visualizations"
  save_predictions: true
  save_frequency: 100

# =============================================================================
# 日誌配置
# =============================================================================
logging:
  level: "info"
  log_freq: 10
  tensorboard: true  # Colab 支持 TensorBoard
  wandb: false  # 可選：設為 true 並配置 API key
  
  metrics:
    - "total_loss"
    - "data_loss"
    - "pde_loss"
    - "wall_loss"
    - "learning_rate"

# =============================================================================
# 早停配置
# =============================================================================
early_stopping:
  enabled: true
  patience: 200  # 較大耐心（1000 epochs 訓練）
  min_delta: 1.0e-7
  monitor: "total_loss"

# =============================================================================
# 可重現性配置
# =============================================================================
reproducibility:
  deterministic: true
  benchmark: false

# =============================================================================
# Colab 專用設定
# =============================================================================
colab:
  mount_gdrive: true  # 掛載 Google Drive 保存檢查點
  gdrive_checkpoint_dir: "/content/drive/MyDrive/pinns-mvp/checkpoints/colab_piratenet_2d_slice"
  auto_save_interval: 100  # 每 100 epochs 自動保存到 GDrive
  
  # 資源監控
  monitor_gpu: true
  monitor_interval: 50
  
  # 中斷恢復
  auto_resume: true
  resume_from_gdrive: true

# =============================================================================
# 使用說明
# =============================================================================
usage_notes: |
  🎯 2D 切片訓練指南：
  
  ✅ 優勢：
    - 記憶體使用 ~8 GB（vs 3D 的 ~40 GB）
    - 訓練速度快 10 倍
    - 梯度計算簡單（2D vs 3D）
    - 快速驗證修復是否生效
  
  ⚙️ 關鍵修復：
    ✅ 壁面邊界：y ∈ [-1, 1]（三處一致）
    ✅ 學習率調度器：明確啟用 warmup_exponential
    ✅ GradNorm：每 100 steps 更新權重
    ✅ 因果權重：epsilon=1.0
    ✅ 記憶體優化：batch_size=2048, pde_points=2048
  
  📊 預期結果（1000 epochs）：
    - 訓練時間：30-60 分鐘（T4 GPU）
    - 目標 L2：≤ 20%（2D 切片）
    - 記憶體峰值：~8 GB
    - 檢查點自動保存到 Google Drive
  
  🚀 使用命令：
    # Colab 中執行
    !python scripts/train.py --cfg configs/colab_piratenet_2d_slice.yml
  
  📈 驗證修復是否生效：
    # 檢查訓練日誌
    !tail -50 log/colab_piratenet_2d_slice/training.log
    
    # 關鍵指標：
    # 1. wall_loss > 0（壁面邊界生效）
    # 2. learning_rate 遞減（調度器生效）
    # 3. total_loss 穩定下降（收斂正常）
  
  ⚠️ 限制：
    - 2D 切片無法捕捉 z 方向變化
    - 適合快速驗證，不適合最終評估
    - 完整評估需使用 3D 配置
  
  🔄 下一步：
    - 若 2D 切片達標（L2 ≤ 20%）
    - 再啟用 3D 訓練（需更多記憶體）
    - 或使用梯度檢查點（gradient checkpointing）

# =============================================================================
# 快速啟動命令（複製到 Colab）
# =============================================================================
quick_start_commands: |
  # 1. 掛載 Google Drive
  from google.colab import drive
  drive.mount('/content/drive')
  
  # 2. 克隆專案
  !git clone https://github.com/your-repo/pinns-mvp.git
  %cd pinns-mvp
  
  # 3. 安裝依賴
  !pip install -q torch torchvision torchaudio
  !pip install -q pyJHTDB h5py pyyaml tensorboard
  
  # 4. 下載數據（2D 切片）
  !mkdir -p data/jhtdb/channel_flow_re1000
  !python scripts/fetch_channel_flow.py --K 50 --slice-2d
  
  # 5. 開始訓練（2D 切片）
  !python scripts/train.py --cfg configs/colab_piratenet_2d_slice.yml
  
  # 6. 監控訓練（新 Cell）
  %load_ext tensorboard
  %tensorboard --logdir ./checkpoints/colab_piratenet_2d_slice
