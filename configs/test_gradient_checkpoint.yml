# ⚡ 梯度檢查點性能測試配置
# 用途：驗證梯度檢查點功能的記憶體節省與數值正確性
# 預期時間：10-15 分鐘（100 epochs，對比兩種模式）
# 目標：記憶體節省 ≥30%，數值誤差 <1e-6

# =============================================================================
# 基本實驗設定
# =============================================================================
experiment:
  name: "test_gradient_checkpoint"
  version: "v1.0"
  seed: 42
  device: "auto"
  precision: "float32"
  description: "Gradient checkpointing performance test (memory vs. speed trade-off)"

# =============================================================================
# 重現性設定
# =============================================================================
reproducibility:
  deterministic: true
  benchmark: false
  num_workers: 4

# =============================================================================
# 資料配置（2D 切片 - 與快速基準一致）
# =============================================================================
data:
  source: "jhtdb"
  dataset: "channel"
  
  jhtdb_config:
    enabled: true
    dataset_name: "channel"
    description: "通道流 (Re_tau=1000) - 2D 切片"
    domain:
      x: [0, 25.13]
      y: [-1.0, 1.0]
      z: [0, 9.42]
    resolution:
      x: 2048
      y: 512
      z: 1536
    time_range: [0.0, 26.0]
    dt: 0.0065
    variables: ['u', 'v', 'w', 'p']
  
  normalize: true
  cache_dir: "./data/jhtdb/channel_flow_re1000"

# 資料標準化配置
normalization:
  type: 'training_data_norm'
  params: {}
  noise_sigma: 0.01
  dropout_prob: 0.05
  
  # 2D 切片配置
  slice_config:
    plane: "xy"
    z_position: 4.71
    steady_state: true
    time_average_window: [20.0, 26.0]

# =============================================================================
# 感測點配置（與快速基準一致）
# =============================================================================
sensors:
  K: 50
  selection_method: "qr_pivot"
  spatial_coverage: "optimal"

# =============================================================================
# 模型架構（與快速基準一致）
# =============================================================================
model:
  type: "enhanced_fourier_mlp"
  in_dim: 3
  out_dim: 4
  width: 128
  depth: 4
  activation: "sine"
  
  fourier_features:
    type: "axis_selective"
    axes_config: {x: [1, 2], y: [], z: [1, 2]}
    full_axes_config: {x: [1, 2, 4], y: [], z: [1, 2, 4]}
    domain_lengths: {x: 25.13, y: 2.0, z: 9.42}
    fourier_m: 16
    fourier_sigma: 5.0
  
  scaling:
    learnable: true
    input_norm: "channel_flow"
    output_norm: "friction_velocity"
    friction_velocity: 0.04997
    channel_half_height: 1.0
    viscous_length: 1.0e-3

# =============================================================================
# 物理設定（⚡ 啟用梯度檢查點）
# =============================================================================
physics:
  type: "vs_pinn_channel_flow"
  nu: 5.0e-5
  rho: 1.0
  
  vs_pinn:
    scaling_factors:
      N_x: 2.0
      N_y: 12.0
      N_z: 2.0
    
    loss_config:
      warmup_epochs: 5
    
    boundary_config:
      boundary_band_width: 5.0e-3
    
    enable_rans: false
    
    # ⚡ 核心配置：啟用梯度檢查點
    use_gradient_checkpointing: true  # 🔥 新增參數
  
  channel_flow:
    Re_tau: 1000.0
    Re_bulk: 39998.0
    u_tau: 0.04997
    pressure_gradient: 0.0025
    
  domain:
    x_range: [0.0, 25.13]
    y_range: [-1.0, 1.0]
    z_range: [0.0, 9.42]
    
  boundary_conditions:
    wall_velocity: [0.0, 0.0, 0.0]
    wall_location: [-1.0, 1.0]
    periodic_x: true
    periodic_z: true
    pressure_driven: true
    mean_pressure_gradient: 0.0025

# =============================================================================
# 損失函數權重（與快速基準一致）
# =============================================================================
losses:
  data_weight: 5.0
  boundary_weight: 5.0
  
  momentum_x_weight: 5.0
  momentum_y_weight: 5.0
  momentum_z_weight: 5.0
  continuity_weight: 5.0
  
  wall_constraint_weight: 10.0
  periodicity_weight: 2.0
  pressure_gradient_weight: 1.0
  
  prior_weight: 0.1
  source_l1: 1.0e-7
  gradient_penalty: 1.0e-5
  
  adaptive_weighting: false
  causal_weighting: false

# =============================================================================
# 訓練設定（與快速基準一致）
# =============================================================================
training:
  optimizer: "adam"
  lr: 1.0e-3
  weight_decay: 1.0e-5
  
  lr_scheduler:
    type: "warmup_cosine"
    min_lr: 1.0e-5
    warmup_epochs: 10
    T_max: 100
  
  epochs: 100
  max_epochs: 100
  batch_size: 512
  validation_freq: 25
  checkpoint_freq: 50
  log_interval: 10
  
  early_stopping:
    enabled: true
    patience: 50
    min_delta: 1.0e-6
  
  sampling:
    pde_points: 1024
    boundary_points: 500
    wall_clustering: 0.2
  
  gradient_clip: 1.0

curriculum:
  enable: false

ensemble:
  enable: false

# =============================================================================
# 評估設定（與快速基準一致）
# =============================================================================
evaluation:
  grid_resolution: [64, 32, 32]
  
  metrics:
    - "relative_l2"
    - "wall_shear_stress"
    - "mass_conservation"
    - "mean_velocity_profile"
  
  thresholds:
    l2_error: 0.50
    mass_conservation_error: 1.0e-2
    wall_shear_stress_error: 0.50
    mean_profile_correlation: 0.70

# =============================================================================
# 日誌與儲存
# =============================================================================
logging:
  level: "info"
  log_freq: 10
  save_predictions: true
  tensorboard: true
  wandb: false

output:
  checkpoint_dir: "./checkpoints/test_gradient_checkpoint"
  results_dir: "./results/test_gradient_checkpoint"
  visualization_dir: "./results/test_gradient_checkpoint/visualizations"

# =============================================================================
# 驗收標準（梯度檢查點專用）
# =============================================================================
test_acceptance:
  stability:
    - no_nan_inf: true
    - loss_finite: true
    - gradient_stable: true
  
  performance:
    - u_l2_error_target: 0.50
    - loss_converged: true
    - pde_loss_ratio_min: 0.10
  
  # ⚡ 梯度檢查點專用驗收
  checkpointing:
    - memory_reduction_target: 0.30  # 目標：記憶體減少 ≥30%
    - speed_overhead_limit: 0.15     # 限制：速度慢 ≤15%
    - numerical_error_limit: 1.0e-6  # 限制：數值誤差 <1e-6

# =============================================================================
# 使用說明
# =============================================================================
usage_notes: |
  🎯 用途：
    - 驗證梯度檢查點記憶體優化效果
    - 確保數值精度無退化
    - 測量速度與記憶體的權衡
  
  ⚙️ 配置特點：
    - use_gradient_checkpointing: true（啟用檢查點）
    - 與 2d_quick_baseline.yml 其他參數完全一致（可對比）
    - 固定 seed=42（保證可重現性）
  
  ✅ 成功標準：
    1. 無 NaN/Inf（數值穩定性）
    2. 記憶體節省 ≥30%（效能目標）
    3. 速度影響 ≤15%（可接受範圍）
    4. 數值誤差 <1e-6（精度保證）
  
  🚀 使用範例：
    # 1. 啟用檢查點測試
    python scripts/train.py --cfg configs/test_gradient_checkpoint.yml
    
    # 2. 對比基準測試（關閉檢查點）
    # 修改 use_gradient_checkpointing: false，重新運行
  
  📊 預期結果：
    - 訓練時間：10-15 分鐘（GPU，比基準慢 ~10%）
    - 記憶體使用：~50% 減少（關鍵指標）
    - 最終 L2：與基準完全一致（±1e-6）
  
  📋 驗證流程：
    1. 記錄基準訓練的記憶體峰值（nvidia-smi）
    2. 記錄檢查點訓練的記憶體峰值
    3. 計算記憶體節省比例
    4. 比較兩次訓練的最終 Loss（數值一致性）
    5. 比較訓練時間（速度影響）
  
  ⚠️ 注意事項：
    - 需使用 GPU 進行測試（CPU 上記憶體差異不明顯）
    - 確保系統有足夠記憶體運行基準測試
    - 使用相同 batch_size 保證公平對比
